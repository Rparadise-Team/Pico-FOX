#!/bin/sh
if dmesg|fgrep -q "FB_WIDTH=640"; then
export SCREEN_WIDTH=640
export SCREEN_HEIGHT=480
export SUBMODEL="MM"
fi
if dmesg|fgrep -q "FB_WIDTH=752"; then
export SCREEN_WIDTH=752
export SCREEN_HEIGHT=560
export SUBMODEL="MMv4"
fi
export SDCARD_PATH="/mnt/SDCARD"
export HOME="${SDCARD_PATH}"
SETTINGS_INT_FILE="/appconfigs/system.json"
SETTINGS_EXT_FILE="/mnt/SDCARD/system.json"

export SYSTEM_PATH="${SDCARD_PATH}/Koriki"

export LD_LIBRARY_PATH="${SYSTEM_PATH}/lib:${LD_LIBRARY_PATH}"
export PATH="${SYSTEM_PATH}/bin:${PATH}"

export SWAPFILE="/mnt/SDCARD/cachefile"
export CPUSAVE="/mnt/SDCARD/cpu.sav"
export GOVSAVE="/mnt/SDCARD/governor.sav"
export SPEEDSAVE="/mnt/SDCARD/speed.sav"

export ROMS="/mnt/SDCARD/Roms/PICO/"
export SPLORE="/mnt/SDCARD/Roms/PICO/Splore/"
export BBS="/mnt/SDCARD/App/pico/.lexaloffle/pico-8/bbs/carts/"

# Detect flash type
if dmesg|fgrep -q "[FSP] Flash is detected (0x1100, 0x68, 0x40, 0x18) ver1.1"; then
	export SETTINGS_FILE="$SETTINGS_EXT_FILE"
# Create v3 config file is this is not found in the root of SDCARD
	if [ ! -f "$SETTINGS_FILE" ]; then
		cp "${SYSTEM_PATH}"/assets/system.json "$SETTINGS_FILE"
	fi
	if [ ! -s "$SETTINGS_FILE" ]; then
		cp "${SYSTEM_PATH}"/assets/system.json "$SETTINGS_FILE"
	fi
else
	if [ -f /appconfigs/system.json.old ]; then
    export SETTINGS_FILE="$SETTINGS_EXT_FILE"
# Create v4 config file is this is not found in the root of SDCARD
	if [ "$SUBMODEL" == "MMv4" ]; then
		if [ ! -f "$SETTINGS_FILE" ]; then
			cp "${SYSTEM_PATH}"/assets/system-v4.json "$SETTINGS_FILE"
		fi
		if [ ! -s "$SETTINGS_FILE" ]; then
			cp "${SYSTEM_PATH}"/assets/system-v4.json "$SETTINGS_FILE"
		fi
	fi
	if [ "$SUBMODEL" == "MM" ]; then
		if [ ! -f "$SETTINGS_FILE" ]; then
			cp "${SYSTEM_PATH}"/assets/system.json "$SETTINGS_FILE"
		fi
		if [ ! -s "$SETTINGS_FILE" ]; then
			cp "${SYSTEM_PATH}"/assets/system.json "$SETTINGS_FILE"
		fi
	fi
	else
    	export SETTINGS_FILE="$SETTINGS_INT_FILE"
	fi
fi

# Detect model and init charger GPIO
if [ ! -f "/customer/app/axp_test" ]; then
	export MODEL="MM"
	if [ ! -f "/sys/devices/gpiochip0/gpio/gpio59/direction" ]; then
		echo 59 > "/sys/class/gpio/export"
		echo in > "/sys/devices/gpiochip0/gpio/gpio59/direction"
	fi
else
	export MODEL="MMP"
fi

#fix onion broken boot in koriki
if [ ! -f "$SETTINGS_FILE" ]; then
   if [ "$MODEL" == "MM" ]; then
   cp "${SYSTEM_PATH}"/assets/system.json "$SETTINGS_FILE"
   fi
   if [ "$MODEL" == "MMP" ]; then
   cp "${SYSTEM_PATH}"/assets/system.mmp.json "$SETTINGS_FILE"
   fi
fi

resize() {
# Verificar si no existe el archivo "resized"
if [ ! -f "$SDCARD_PATH/RESIZED" ]; then

	export TMP_PATH="/tmp/fatresize"
	export TMP_LIB="/tmp/fatresize/lib"
	
    echo "Iniciando redimensionamiento de la partición FAT32..."

    # Crear directorio temporal para fatresize y sus dependencias
    mkdir -p $TMP_PATH
	mkdir -p $TMP_LIB

    # Copiar fatresize y sus bibliotecas necesarias
    echo "Copiando fatresize y dependencias..."
    cp "$SDCARD_PATH/Koriki/bin/fatresize" $TMP_PATH/
	cp "$SDCARD_PATH/Koriki/bin/show" $TMP_PATH/
	cp "$SDCARD_PATH/Koriki/images/resize.png" $TMP_PATH/
	chmod +x $TMP_PATH/fatresize
	chmod +x $TMP_PATH/show
    cp "$SDCARD_PATH/Koriki/lib/libparted-fs-resize.so.0" $TMP_LIB/
    cp "$SDCARD_PATH/Koriki/lib/libparted.so.2" $TMP_LIB/
	cp "$SDCARD_PATH/Koriki/lib/libblkid.so.1" $TMP_LIB/
	cp "$SDCARD_PATH/Koriki/lib/libuuid.so.1" $TMP_LIB/
	cp "$SDCARD_PATH/Koriki/lib/libpng16.so.16" $TMP_LIB/
	cp "$SDCARD_PATH/Koriki/lib/libmsettings.so" $TMP_LIB/
	chmod +x $TMP_LIB/libparted-fs-resize.so.0
	chmod +x $TMP_LIB/libparted.so.2
	chmod +x $TMP_LIB/libblkid.so.1
	chmod +x $TMP_LIB/libuuid.so.1
	chmod +x $TMP_LIB/libpng16.so.16
	chmod +x $TMP_LIB/libmsettings.so


    # Copiar el script de redimensionamiento
    echo "Copiando el script de redimensionamiento..."
    cp "$SDCARD_PATH/Koriki/bin/resize_partition" /tmp/
    chmod +x /tmp/resize_partition

    # Ejecutar el script de redimensionamiento
    echo "Ejecutando el script de redimensionamiento..."
	killall -9 main
    /tmp/resize_partition
	exit 0
	
else
    echo "La partición ya ha sido redimensionada anteriormente."
fi
}

update() {
	
	echo "Checking for updater Pico-FOX package"
	
	if [ -f "${SDCARD_PATH}"/.deletes ]; then
		while IFS= read -r file_to_delete; do
		rm -rf "${file_to_delete}"
		done < "${SDCARD_PATH}"/.deletes
		rm "${SDCARD_PATH}"/.deletes
	fi

	if [ -f "${SDCARD_PATH}/"update_pico-fox_*.zip ]; then
	
		echo "update Pico-FOX package found"
		
		for file in `ls "${SDCARD_PATH}"/update_pico-fox_*.zip`; do
		unzip -q -o "${file}" ".update_splash.png" -d "${SDCARD_PATH}"
		sync
		
		show "${SDCARD_PATH}"/.update_splash.png

		unzip -q -o "${file}" ".deletes" -d "${SDCARD_PATH}"
		
		if [ -f "${SDCARD_PATH}"/.deletes ]; then
			while IFS= read -r file_to_delete; do
			if [ -f "${file_to_delete}" ]; then
				rm "${file_to_delete}"
			elif [ -d "${file_to_delete}" ]; then
				rm -rf "${file_to_delete}"
			fi
			done < "${SDCARD_PATH}"/.deletes
		fi

		unzip -q -o "${file}" -d "${SDCARD_PATH}"

		rm "${file}"
		
		if [ -f "${SDCARD_PATH}"/.deletes ]; then
			rm "${SDCARD_PATH}"/.deletes
		fi
		
		if [ -f "${SDCARD_PATH}"/.update_splash.png ]; then
		rm "${SDCARD_PATH}"/.update_splash.png
		fi
		
		sleep 5s
		done
		
		sync
		sleep 5s
		
		if [ "$MODEL" == "MMP" ]; then
			poweroff
		else
			reboot
		fi
		
		sleep 10s
	fi
	
	echo "update Pico-FOX package not found"

}

killprocess() {
	pid=`ps | grep $1 | grep -v grep | cut -d' ' -f3`
	kill -9 $pid
}

init_lcd() {
	cat /proc/ls
	if [ $1 -ne 0 ] ; then
		sleep $1
	fi 
}

runifnecessary() {
	a=`ps | grep $1 | grep -v grep`
	if [ "$a" == "" ] ; then
		$2 &
	fi
}

reset_settings() {
	if [ -f "${SDCARD_PATH}/.reset_settings" ]; then
		if [ "$MODEL" == "MM" ]; then
		    if [ -f "/appconfigs/system.json.old" ]; then
			if [ "$SUBMODEL" == "MMv4" ]; then
			cp "${SYSTEM_PATH}"/assets/system-v4.json "$SETTINGS_FILE"
			fi
			if [ "$SUBMODEL" == "MM" ]; then
			cp "${SYSTEM_PATH}"/assets/system.json "$SETTINGS_FILE"
			fi
			else
			cp "${SYSTEM_PATH}"/assets/system.json "$SETTINGS_FILE"
			fi
			rm "${SDCARD_PATH}"/.reset_settings
			sync
			reboot
			sleep 5
		else
			cp "${SYSTEM_PATH}"/assets/system.mmp.json "$SETTINGS_FILE"
			rm "${SDCARD_PATH}"/.reset_settings
			sync
			poweroff
			sleep 5
		fi
	fi
}

shutdown_console() {
	if [ ! -f /customer/app/axp_test ]; then
		killall main
		killall audioserver
		killall audioserver.min
		killall batmon
		killall keymon
		sleep 2
		shutdown
	else
		killall main
		killall audioserver
		killall audioserver.plu
		killall batmon
		killall keymon
		sleep 2
		shutdown
	fi
}

# set virtual memory size
echo 4096 > "/proc/sys/vm/max_map_count"

# Init_lcd
init_lcd 1

# Init backlight
echo 0 > "/sys/class/pwm/pwmchip0/export"
echo 800 > "/sys/class/pwm/pwmchip0/pwm0/period"
echo 70 > "/sys/class/pwm/pwmchip0/pwm0/duty_cycle"
echo 1 > "/sys/class/pwm/pwmchip0/pwm0/enable"

# Resize microsd
resize

# Charging screen
"${SYSTEM_PATH}"/bin/charging

# Update opportunity
update

# check swap size
if [ -f "${SWAPFILE}" ]; then
SWAPSIZE=`stat -c %s "${SWAPFILE}"`

MINSIZE=$((128 * 1024 * 1024))

if [ "$SWAPSIZE" -lt "$MINSIZE" ]; then
	rm "${SWAPFILE}"
fi
fi

# Enable swap
if [ ! -f "${SWAPFILE}" ]; then
	show "${SYSTEM_PATH}"/images/swap.png
	dd if=/dev/zero of="${SWAPFILE}" bs=1M count=128
	mkswap "${SWAPFILE}"
	sync
fi
swapon -p 50 "${SWAPFILE}"

# Reset settings on first boot
reset_settings

# Get save volumen
/customer/app/tinymix set 6 100
vol=`/customer/app/jsonval vol`

if [ "$vol" -ge "20" ]; then
    sed -i 's/"vol":\s*\([2][123]\)/"vol": 20/' "$SETTINGS_FILE"
	sync
	vol=`/customer/app/jsonval vol`
fi

vol=$((($vol*3)+40))
/customer/app/tinymix set 6 "$vol"

#fixed color gamma
if [ "$MODEL" == "MM" ]; then
	if [ "$SUBMODEL" == "MMv4" ]; then
		echo "colortemp 0 0 0 0 128 128 140" > /proc/mi_modules/mi_disp/mi_disp0
	fi
fi

# Show bootScreen or videosplash
echo 0 > "/sys/module/gpio_keys_polled/parameters/button_enable"
"${SYSTEM_PATH}"/bin/ffplayer "${SYSTEM_PATH}"/videosplash.mp4
echo 1 > "/sys/module/gpio_keys_polled/parameters/button_enable"

# fix if the settings files is missing
if [ ! -f "$SETTINGS_FILE" ]; then
	if [ "$MODEL" == "MMP" ]; then
		cp "${SYSTEM_PATH}"/assets/system.mmp.json "$SETTINGS_FILE"
		sync
		reboot
		sleep 5
	fi
	if [ "$MODEL" == "MM" ]; then
		if [ "$SUBMODEL" == "MM" ]; then
		cp "${SYSTEM_PATH}"/assets/system.json "$SETTINGS_FILE"
		fi
		if [ "$SUBMODEL" == "MMv4" ]; then
		cp "${SYSTEM_PATH}"/assets/system-v4.json "$SETTINGS_FILE"
		fi
		sync
		reboot
		sleep 5
	fi
fi

# Latency reduction audioserver by Eggs
# NOTE: could cause performance issues on more demanding cores...maybe?
runsvr=`/customer/app/jsonval audiofix`

if [ "$runsvr" != "0" ] ; then
	/mnt/SDCARD/Koriki/bin/audioserver &
	touch /tmp/audioserver_on
	sync
	export LD_PRELOAD=/mnt/SDCARD/Koriki/lib/libpadsp.so
fi

# check if wifi value is 1
if [ "$MODEL" == "MMP" ]; then
    runwifi=`/customer/app/jsonval wifi`
	
	if [ "$runwifi" == "1" ]; then
	sed -i "s/\"wifi\":\s*[01]/\"wifi\": 0/" "$SETTINGS_FILE"
	/customer/app/axp_test wifioff
	sync
	fi
	
fi     

# Set the last CPU and GOV change
if [ -f "${CPUSAVE}" ]; then
	CPU=`cat "${CPUSAVE}"`
	echo "${CPU}" > "/sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq"
fi
if [ ! -f "${CPUSAVE}" ]; then
	touch "${CPUSAVE}"
	echo 1200000 > "${CPUSAVE}"
	sync
fi
if [ -f "${GOVSAVE}" ]; then
	echo ondemand > "${GOVSAVE}"
	sync
fi
if [ ! -f "${GOVSAVE}" ]; then
	touch "${GOVSAVE}"
	echo ondemand > "${GOVSAVE}"
	sync
fi
if [ -f "${SPEEDSAVE}" ]; then
	echo "<unsupported>" > "${SPEEDSAVE}"
	sync
fi
if [ ! -f "${SPEEDSAVE}" ]; then
	touch "${SPEEDSAVE}"
	echo "<unsupported>" > "${SPEEDSAVE}"
	sync
fi

# Koriki keymon
runifnecessary "keymon" "${SYSTEM_PATH}"/bin/keymon

# Koriki batmon (compiled and adapter from onion)
"${SYSTEM_PATH}"/bin/batmon &

# create dhcp.leases
if [ ! -f /appconfigs/dhcp.leases ]; then
	touch /appconfigs/dhcp.leases
	sync
fi

# clear ftp log file
if [ -f "${SYSTEM_PATH}"/bftpdutmp ]; then
	rm "${SYSTEM_PATH}"/bftpdutmp
	touch "${SYSTEM_PATH}"/bftpdutmp
	sync
fi

# clean pico8 logs files
if [ -f "${SDCARD_PATH}"/App/pico/.lexaloffle/pico-8/activity_log.txt ]; then
	rm "${SDCARD_PATH}"/App/pico/.lexaloffle/pico-8/activity_log.txt
	rm "${SDCARD_PATH}"/App/pico/.lexaloffle/pico-8/log.txt
fi

# Set time
if dmesg|fgrep -q "power key is on"; then
	export SUBMODEL="MMP_RTC"
else
	export SUBMODEL="MMP_NO_RTC"
fi

if [ -f "${SDCARD_PATH}"/App/Clock/time.txt ]; then
    localtime=`cat "${SDCARD_PATH}"/App/Clock/time.txt`
	if dmesg|fgrep -q "Please set rtc timer (hwclock -w) "; then
		hwclock -w
		date -s "${localtime}"
	else
		if [ "$SUBMODEL" == "MMP_NO_RTC" ]; then
			date -s "${localtime}"
		fi
	fi
else
    touch "${SDCARD_PATH}"/App/Clock/time.txt
	hwclock -w
	date -s "2024-09-01 10:00:00"
	localtime=$(date +"%Y-%m-%d %T")
	echo "$localtime" > "${SDCARD_PATH}"/App/Clock/time.txt
fi

if [ -f "${SDCARD_PATH}"/App/Clock/timezone.txt ]; then
    timezone=`cat "${SDCARD_PATH}"/App/Clock/timezone.txt`
	export TZ=UTC$((-1*timezone))
else
    touch "${SDCARD_PATH}"/App/Clock/timezone.txt
	echo +0 > "${SDCARD_PATH}"/App/Clock/timezone.txt
	export TZ=UTC+0
fi

# Detect 'MENU' press to open CLOCK app
if cat /sys/kernel/debug/gpio|grep "gpio-12 "|grep lo > /dev/null 2>&1
then
	"${SDCARD_PATH}"/App/Clock/Clock.sh
	sync
fi

#kill main program from stock

killall -9 main

# Launch Pico8
while [ 1 ]; do
	HOME="${SDCARD_PATH}"
	cd "${SYSTEM_PATH}"/bin
	./launch.sh
	show /mnt/SDCARD/poweroff.png
	if [ ! -d "$SPLORE" ]; then
    mkdir -p "$SPLORE"
	fi

	if ls "$BBS"* 1> /dev/null 2>&1; then
		rm "$BBS"temp-*
    	cp "$BBS"*.p8.png "$SPLORE"
	else
    	echo "No BBS files found to copy."
	fi
	sync
	sleep 5s
# turf off the console.
	shutdown_console
done
